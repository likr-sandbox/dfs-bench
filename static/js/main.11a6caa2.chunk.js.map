{"version":3,"sources":["benchmark.worker.js","App.js","index.js"],"names":["addMethods","require","methods","module","exports","w","Worker","__webpack_public_path__","name","run","worker","Chart","records","data","graphType","dfsType","push","id","filter","record","map","x","e","y","mean","style","height","margin","top","right","bottom","left","xScale","type","yScale","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","isInteractive","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","App","useState","setRecords","loading","setLoading","className","onClick","a","n","result","Array","i","key","v","toFixed","count","render","document","getElementById"],"mappings":"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","file":"static/js/main.11a6caa2.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"GraphJs\",\"run\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"fe9faf4efceba86319ab.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, { useState } from \"react\";\nimport worker from \"./benchmark.worker\";\nimport { ResponsiveLineCanvas } from \"@nivo/line\";\n\nconst { run } = worker();\n\nconst Chart = ({ records }) => {\n  const data = [];\n  for (const graphType of [\"js\", \"rust\"]) {\n    for (const dfsType of [\"js\", \"rust\"]) {\n      data.push({\n        id: `${graphType}-${dfsType}`,\n        data: records\n          .filter(\n            (record) =>\n              record.graphType === graphType && record.dfsType === dfsType,\n          )\n          .map((record) => {\n            return { x: record.e, y: record.mean * 1000 };\n          }),\n      });\n    }\n  }\n  return (\n    <div style={{ height: \"600px\" }}>\n      <ResponsiveLineCanvas\n        data={data}\n        margin={{ top: 100, right: 10, bottom: 50, left: 60 }}\n        xScale={{ type: \"linear\" }}\n        yScale={{ type: \"linear\" }}\n        axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"|E|\",\n          legendOffset: 36,\n          legendPosition: \"middle\",\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: \"time (ms)\",\n          legendOffset: -50,\n          legendPosition: \"middle\",\n        }}\n        colors={{ scheme: \"category10\" }}\n        pointColor={{ theme: \"background\" }}\n        pointBorderWidth={1}\n        pointBorderColor={{ from: \"serieColor\" }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        isInteractive={false}\n        useMesh={true}\n        legends={[\n          {\n            anchor: \"top-left\",\n            direction: \"row\",\n            justify: false,\n            translateX: 20,\n            translateY: -20,\n            itemsSpacing: 2,\n            itemDirection: \"left-to-right\",\n            itemWidth: 80,\n            itemHeight: 12,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: \"circle\",\n            symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n            effects: [\n              {\n                on: \"hover\",\n                style: {\n                  itemBackground: \"rgba(0, 0, 0, .03)\",\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n      />\n    </div>\n  );\n};\n\nexport const App = () => {\n  const [records, setRecords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  return (\n    <div>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"content\">\n            <h1>DFS Benchmark with WebAssembly</h1>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"control\">\n            <button\n              className={`button is-primary${loading ? \" is-loading\" : \"\"}`}\n              onClick={async () => {\n                setRecords([]);\n                setLoading(true);\n                const records = [];\n                for (let n = 100; n <= 1000; n += 100) {\n                  for (const result of await run(n, 0.1)) {\n                    records.push(result);\n                  }\n                  setRecords(Array.from(records));\n                }\n                setLoading(false);\n              }}\n            >\n              Run\n            </button>\n          </div>\n          <div className=\"control\">\n            <Chart records={records} />\n          </div>\n          <div className=\"control\">\n            <table className=\"table is-hoverable is-fullwidth\">\n              <thead>\n                <tr>\n                  <th>|V|</th>\n                  <th>|E|</th>\n                  <th>Data Structure</th>\n                  <th>DFS</th>\n                  <th>Mean (ms)</th>\n                  <th>Repeat</th>\n                </tr>\n              </thead>\n              <tbody>\n                {records.map((result, i) => {\n                  return (\n                    <tr key={i}>\n                      <td>{result.v}</td>\n                      <td>{result.e}</td>\n                      <td>{result.graphType}</td>\n                      <td>{result.dfsType}</td>\n                      <td>{(result.mean * 1000).toFixed(3)}</td>\n                      <td>{result.count}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n","import \"bulma/css//bulma.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App.js\";\n\nrender(<App />, document.getElementById(\"content\"));\n"],"sourceRoot":""}